import numpy as np
from scipy.linalg import eig

p = 0.9


def powMethod(B):
    A = B.transpose()
    x = np.random.rand(A.shape[0])
    x = [60, 120, 180]
    for i in range(59):
        k = A.dot(x)
        o = np.linalg.norm(A.dot(x), ord=1)
        x = k / o
        print(x, k, o)
    l = A.dot(x).dot(x)/x.dot(x)
    print(x, l)


def build_graph():
    n = len(g)
    r = np.sum(g, axis=1)
    response = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            response[i][j] = p * (g[i][j] / r[i] if r[i] != 0 else 1 / n) + (1 - p) / n
    return response


if __name__ == "__main__":
    g = [[0, 0, 0, 1, 0, 1, 0, 1],
         [1, 0, 0, 0, 0, 0, 1, 0],
         [1, 0, 0, 0, 0, 1, 0, 0],
         [0, 1, 1, 0, 1, 0, 0, 0],
         [0, 1, 0, 0, 1, 0, 1, 0],
         [1, 0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0, 1],
         [0, 0, 1, 0, 0, 1, 1, 1]]
    g = [[0, 1, 1], [0, 0, 1], [0, 0, 0]]
    res = build_graph()
    # print(res, "\n\n")
    powMethod(res)
    values, left, right = eig(res, right=True, left=True)
    for i in range(len(values)):
        if abs(values[i] - 1) < 1e-8:
            norm = np.linalg.norm(left[:, i], 1)
            print(np.real(left[:, i]) / norm)

'''
Матрица смежности:
[[0, 0, 0, 1, 0, 1, 0, 1],
 [1, 0, 0, 0, 0, 0, 1, 0],
 [1, 0, 0, 0, 0, 1, 0, 0],
 [0, 1, 1, 0, 1, 0, 0, 0],
 [0, 1, 0, 0, 1, 0, 1, 0],
 [1, 0, 0, 0, 1, 0, 0, 0],
 [0, 0, 0, 1, 0, 0, 0, 1],
 [0, 0, 1, 0, 0, 1, 1, 1]]

Матрица вероятностей:
[[0.01875    0.01875    0.01875    0.30208333 0.01875    0.30208333 0.01875    0.30208333]
 [0.44375    0.01875    0.01875    0.01875    0.01875    0.01875    0.44375    0.01875   ]
 [0.44375    0.01875    0.01875    0.01875    0.01875    0.44375    0.01875    0.01875   ]
 [0.01875    0.30208333 0.30208333 0.01875    0.30208333 0.01875    0.01875    0.01875   ]
 [0.01875    0.30208333 0.01875    0.01875    0.30208333 0.01875    0.30208333 0.01875   ]
 [0.44375    0.01875    0.01875    0.01875    0.44375    0.01875    0.01875    0.01875   ]
 [0.01875    0.01875    0.01875    0.44375    0.01875    0.01875    0.01875    0.44375   ]
 [0.01875    0.01875    0.23125    0.01875    0.01875    0.23125    0.23125    0.23125   ]] 

Ранги:
[0.14850472 0.09392187 0.08349171 0.11703667 0.14827581 0.12789164 0.1322596  0.14861799]

Вывод:
По матрице смежности видно, что из 2,3 вершин идет меньше всего рёбер (2), но также и из
вершин 6,7, однако вершины, которые ведут в 6 и 7 имеют достаточно много ребер (например из
8 вершины аж 4), вероятность попадания туда ниже, поэтому и их ранг ниже. Остальные ребра похожи
между собой по соотношению вход/выход, поэтому их ранг примерно равен
'''